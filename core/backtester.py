import os
import logging
import pandas as pd
import vectorbt as vbt
from core.metrics import calculate_metrics

logger = logging.getLogger(__name__)


class Backtester:
    def __init__(self, strategy, price_data):
        self.strategy = strategy
        self.price_data = price_data

    def run(self):
        logger.debug("Running generate_signals()")
        signals = self.strategy.generate_signals()

        if signals is None or signals.empty:
            logger.warning("No signals generated by the strategy")
            return None

        if "signal" not in signals.columns:
            logger.error("Signal column is missing from strategy output")
            return None

        # For debug: save signals
        debug_path = os.path.join(
            "logs", f"{self.strategy.__class__.__name__.lower()}_signals.csv"
        )
        os.makedirs("logs", exist_ok=True)
        signals.to_csv(debug_path)
        logger.debug(f"Signals saved to {debug_path}")

        logger.debug("Running portfolio simulation via VectorBT")
        portfolio = vbt.Portfolio.from_signals(
            close=self.price_data.xs("close", level="ohlcv", axis=1).iloc[:, 0],
            entries=signals["signal"] == 1,
            exits=signals["signal"] == -1,
            fees=0.001,
            slippage=0.001,
        )

        logger.debug("Portfolio simulation completed")
        return portfolio

    def save_results(self, portfolio, strategy_name: str):
        logger.debug("Saving portfolio metrics and equity curve")

        if portfolio is None:
            logger.warning("No portfolio to save results for")
            return

        try:
            stats = portfolio.stats()
            logger.debug(f"Available stats: {stats.to_dict()}")
            metrics = calculate_metrics(portfolio)
        except Exception as e:
            logger.exception(f"Error calculating metrics: {e}")
            return

        metrics_df = pd.DataFrame([metrics])
        os.makedirs("results", exist_ok=True)
        metrics_path = f"results/{strategy_name}_metrics.csv"
        metrics_df.to_csv(metrics_path, index=False)
        logger.debug(f"Metrics saved to {metrics_path}")

        try:
            fig = portfolio.plot()
            os.makedirs("results/screenshots", exist_ok=True)
            fig.write_image(f"results/screenshots/{strategy_name}_equity.png")
            logger.debug(f"Equity curve saved for {strategy_name}")
        except Exception as e:
            logger.exception(f"Error saving equity curve: {e}")
