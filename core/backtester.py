import os
import logging
import pandas as pd
import vectorbt as vbt
import matplotlib.pyplot as plt
from core.metrics import calculate_metrics
from config import config

logger = logging.getLogger(__name__)


class Backtester:
    def __init__(self, strategy, price_data: pd.DataFrame):
        self.strategy = strategy
        self.price_data = price_data

    def run(self):
        logger.info("Running generate_signals()")
        signals = self.strategy.generate_signals()

        if signals is None or signals.empty:
            logger.warning("No signals generated by the strategy")
            return None

        # Ensure signals have same index as price data
        signals = signals.reindex(self.price_data.index).fillna(0).astype(int)

        if not signals.index.equals(self.price_data.index):
            logger.error("Signal and price_data index mismatch after reindexing")
            return None

        # Save signals for debugging
        os.makedirs("logs", exist_ok=True)
        debug_path = os.path.join(
            "logs", f"{self.strategy.__class__.__name__.lower()}_signals.csv"
        )
        signals.to_csv(debug_path)
        logger.info(f"Signals saved to {debug_path}")

        logger.info("Running portfolio simulation via VectorBT")
        try:
            portfolio = vbt.Portfolio.from_signals(
                close=self.price_data,
                entries=signals == 1,
                exits=signals == -1,
                fees=config.commission,
                slippage=config.slippage,
                freq=config.timeframe,
            )
            logger.info("Portfolio simulation completed")
            return portfolio
        except Exception as e:
            logger.exception("Error during portfolio simulation")
            return None

    def save_results(self, portfolio, strategy_name: str):
        logger.info("Saving portfolio metrics and equity curve")

        if portfolio is None:
            logger.warning("No portfolio to save results for")
            return

        # Save metrics
        try:
            logger.debug("Portfolio stats calculated")
            metrics = calculate_metrics(portfolio)
            os.makedirs("results", exist_ok=True)
            metrics_path = f"results/{strategy_name}_metrics.csv"
            metrics.to_csv(metrics_path)
            logger.info(f"Metrics saved to {metrics_path}")
        except Exception as e:
            logger.exception("Error calculating or saving metrics")
            return

        # Save equity curve
        try:
            total_equity = portfolio.value().sum(axis=1)
            plt.figure(figsize=(10, 6))
            plt.plot(total_equity, label="Total Equity", color="blue")
            plt.title(f"Equity Curve - {strategy_name}")
            plt.xlabel("Time")
            plt.ylabel("Equity")
            plt.legend()
            plt.grid(True)
            os.makedirs("results/screenshots", exist_ok=True)
            equity_path = f"results/screenshots/{strategy_name}_equity.png"
            plt.savefig(equity_path)
            plt.close()
            logger.info(f"Equity curve saved to {equity_path}")
        except Exception as e:
            logger.exception("Error saving equity curve")

        # Save return heatmap
        try:
            total_return = portfolio.total_return()
            fig, ax = plt.subplots(figsize=(12, 6))
            total_return.plot(kind="bar", ax=ax, color="skyblue")
            ax.set_title(f"Total Return per Symbol - {strategy_name}")
            ax.set_xlabel("Symbol")
            ax.set_ylabel("Return (%)")
            ax.grid(True)
            plt.tight_layout()
            heatmap_path = f"results/screenshots/{strategy_name}_heatmap.png"
            plt.savefig(heatmap_path)
            plt.close()
            logger.info(f"Heatmap saved to {heatmap_path}")
        except Exception as e:
            logger.exception("Error saving heatmap")
