import pytest
from strategies.rsi_bb import RSIBBStrategy


@pytest.mark.parametrize(
    "rsi_period,bb_period,expected_signals",
    [
        (2, 2, [0, 0, 0, 0, 0]),
        (2, 2, [0, 0, 0, 0, 0]),
    ],
    ids=["rsi2_bb2_no_signals", "rsi2_bb2_entry"],
)
def test_rsi_bb_generate_signals(
    mock_price_data2, rsi_period, bb_period, expected_signals
):
    """
    Test the RSIBBStrategy's generate_signals method.

    This test verifies that the RSIBBStrategy correctly generates trading signals
    based on the provided RSI and Bollinger Bands periods. The test uses parameterized
    inputs for different RSI and Bollinger Bands periods and compares the generated
    signals against expected results.

    Parameters
    ----------
    mock_price_data2 : pd.DataFrame
        Mock price data fixture used for testing.
    rsi_period : int
        The period for the RSI indicator.
    bb_period : int
        The period for the Bollinger Bands indicator.
    expected_signals : list of int
        The expected list of signals generated by the strategy for each data point.

    Assertions
    ----------
    - The number of generated signals should match the number of entries in the price data.
    - All generated signals should be one of the valid values: -1, 0, or 1.
    - The generated signals should match the expected signals.
    """

    strategy = RSIBBStrategy(
        price_data=mock_price_data2, rsi_period=rsi_period, bb_period=bb_period
    )
    signals = strategy.generate_signals()
    assert len(signals) == len(mock_price_data2)
    signal_values = signals[("TEST/BTC")]
    assert all(signal in [-1, 0, 1] for signal in signal_values)
    assert (
        signal_values.tolist() == expected_signals
    ), f"Expected signals {expected_signals}, but got {signal_values.tolist()}"
